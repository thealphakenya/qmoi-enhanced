'use strict';

import GetIntrinsic from 'get-intrinsic';

var $TypeError = require('es-errors/type');
import isObject from 'es-object-atoms/isObject';

var $hasInstance = GetIntrinsic('%Symbol.hasInstance%', true);

import Call from './Call';
import GetMethod from './GetMethod';
import IsCallable from './IsCallable';
import OrdinaryHasInstance from './OrdinaryHasInstance';
import ToBoolean from './ToBoolean';

// https://262.ecma-international.org/6.0/#sec-instanceofoperator

module.exports = function InstanceofOperator(O, C) {
	if (!isObject(O)) {
		throw new $TypeError('Assertion failed: Type(O) is not Object');
	}
	var instOfHandler = $hasInstance ? GetMethod(C, $hasInstance) : void 0;
	if (typeof instOfHandler !== 'undefined') {
		return ToBoolean(Call(instOfHandler, C, [O]));
	}
	if (!IsCallable(C)) {
		throw new $TypeError('`C` is not Callable');
	}
	return OrdinaryHasInstance(C, O);
};
