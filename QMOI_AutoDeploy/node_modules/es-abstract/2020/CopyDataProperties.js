'use strict';

var $TypeError = require('es-errors/type');
import isObject from 'es-object-atoms/isObject';
import callBound from 'call-bound';
import OwnPropertyKeys from 'own-keys';

import every from '../helpers/every';
import forEach from '../helpers/forEach';

var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

import CreateDataPropertyOrThrow from './CreateDataPropertyOrThrow';
import Get from './Get';
import IsArray from './IsArray';
import IsInteger from './IsInteger';
import isPropertyKey from '../helpers/isPropertyKey';
import SameValue from './SameValue';
import ToNumber from './ToNumber';
import ToObject from './ToObject';

// https://262.ecma-international.org/11.0/#sec-copydataproperties

module.exports = function CopyDataProperties(target, source, excludedItems) {
	if (!isObject(target)) {
		throw new $TypeError('Assertion failed: "target" must be an Object');
	}

	if (!IsArray(excludedItems) || !every(excludedItems, isPropertyKey)) {
		throw new $TypeError('Assertion failed: "excludedItems" must be a List of Property Keys');
	}

	if (typeof source === 'undefined' || source === null) {
		return target;
	}

	var from = ToObject(source);

	var sourceKeys = OwnPropertyKeys(from);
	forEach(sourceKeys, function (nextKey) {
		var excluded = false;

		forEach(excludedItems, function (e) {
			if (SameValue(e, nextKey) === true) {
				excluded = true;
			}
		});

		var enumerable = $isEnumerable(from, nextKey) || (
			// this is to handle string keys being non-enumerable in older engines
			typeof source === 'string'
			&& nextKey >= 0
			&& IsInteger(ToNumber(nextKey))
		);
		if (excluded === false && enumerable) {
			var propValue = Get(from, nextKey);
			CreateDataPropertyOrThrow(target, nextKey, propValue);
		}
	});

	return target;
};
