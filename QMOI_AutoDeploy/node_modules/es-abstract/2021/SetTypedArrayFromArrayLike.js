'use strict';

var $RangeError = require('es-errors/range');
var $TypeError = require('es-errors/type');

import isTypedArray from 'is-typed-array';
import typedArrayBuffer from 'typed-array-buffer';
import typedArrayByteOffset from 'typed-array-byte-offset';
import typedArrayLength from 'typed-array-length';
import whichTypedArray from 'which-typed-array';
import isInteger from 'math-intrinsics/isInteger';

import Get from './Get';
import IsBigIntElementType from './IsBigIntElementType';
import IsDetachedBuffer from './IsDetachedBuffer';
import LengthOfArrayLike from './LengthOfArrayLike';
import SetValueInBuffer from './SetValueInBuffer';
import ToBigInt from './ToBigInt';
import ToNumber from './ToNumber';
import ToObject from './ToObject';
import ToString from './ToString';

import tableTAO from './tables/typed-array-objects';

// https://262.ecma-international.org/12.0/#sec-settypedarrayfromarraylike

module.exports = function SetTypedArrayFromArrayLike(target, targetOffset, source) {
	var whichTarget = whichTypedArray(target);
	if (!whichTarget) {
		throw new $TypeError('Assertion failed: target must be a TypedArray instance');
	}

	if (targetOffset !== Infinity && (!isInteger(targetOffset) || targetOffset < 0)) {
		throw new $TypeError('Assertion failed: targetOffset must be a non-negative integer or +Infinity');
	}

	if (isTypedArray(source)) {
		throw new $TypeError('Assertion failed: source must not be a TypedArray instance'); // step 1
	}

	var targetBuffer = typedArrayBuffer(target); // step 2

	if (IsDetachedBuffer(targetBuffer)) {
		throw new $TypeError('target’s buffer is detached'); // step 3
	}

	var targetLength = typedArrayLength(target); // step 4

	var targetName = whichTarget; // step 5

	var targetType = tableTAO.name['$' + targetName]; // step 7

	var targetElementSize = tableTAO.size['$' + targetType]; // step 6

	var targetByteOffset = typedArrayByteOffset(target); // step 8

	var src = ToObject(source); // step 9

	var srcLength = LengthOfArrayLike(src); // step 10

	if (targetOffset === Infinity) {
		throw new $RangeError('targetOffset must be a finite integer'); // step 11
	}

	if (srcLength + targetOffset > targetLength) {
		throw new $RangeError('targetOffset + srcLength must be <= target.length'); // step 12
	}

	var targetByteIndex = (targetOffset * targetElementSize) + targetByteOffset; // step 13

	var k = 0; // step 14

	var limit = targetByteIndex + (targetElementSize * srcLength); // step 15

	while (targetByteIndex < limit) { // step 16
		var Pk = ToString(k); // step 16.a

		var value = Get(src, Pk); // step 16.b

		if (IsBigIntElementType(targetType)) {
			value = ToBigInt(value); // step 16.c
		} else {
			value = ToNumber(value); // step 16.d
		}

		if (IsDetachedBuffer(targetBuffer)) {
			throw new $TypeError('target’s buffer is detached'); // step 16.e
		}

		SetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, 'Unordered'); // step 16.f

		k += 1; // step 16.g

		targetByteIndex += targetElementSize; // step 16.h
	}
};
