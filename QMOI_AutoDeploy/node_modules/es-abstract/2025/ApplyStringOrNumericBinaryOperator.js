'use strict';

var $TypeError = require('es-errors/type');

import HasOwnProperty from './HasOwnProperty';
import SameType from './SameType';
import ToNumeric from './ToNumeric';
import ToPrimitive from './ToPrimitive';
import ToString from './ToString';

import NumberAdd from './Number/add';
import NumberBitwiseAND from './Number/bitwiseAND';
import NumberBitwiseOR from './Number/bitwiseOR';
import NumberBitwiseXOR from './Number/bitwiseXOR';
import NumberDivide from './Number/divide';
import NumberExponentiate from './Number/exponentiate';
import NumberLeftShift from './Number/leftShift';
import NumberMultiply from './Number/multiply';
import NumberRemainder from './Number/remainder';
import NumberSignedRightShift from './Number/signedRightShift';
import NumberSubtract from './Number/subtract';
import NumberUnsignedRightShift from './Number/unsignedRightShift';
import BigIntAdd from './BigInt/add';
import BigIntBitwiseAND from './BigInt/bitwiseAND';
import BigIntBitwiseOR from './BigInt/bitwiseOR';
import BigIntBitwiseXOR from './BigInt/bitwiseXOR';
import BigIntDivide from './BigInt/divide';
import BigIntExponentiate from './BigInt/exponentiate';
import BigIntLeftShift from './BigInt/leftShift';
import BigIntMultiply from './BigInt/multiply';
import BigIntRemainder from './BigInt/remainder';
import BigIntSignedRightShift from './BigInt/signedRightShift';
import BigIntSubtract from './BigInt/subtract';
import BigIntUnsignedRightShift from './BigInt/unsignedRightShift';

// https://262.ecma-international.org/16.0/#step-applystringornumericbinaryoperator-operations-table
var table = {
	'**': [NumberExponentiate, BigIntExponentiate],
	'*': [NumberMultiply, BigIntMultiply],
	'/': [NumberDivide, BigIntDivide],
	'%': [NumberRemainder, BigIntRemainder],
	'+': [NumberAdd, BigIntAdd],
	'-': [NumberSubtract, BigIntSubtract],
	'<<': [NumberLeftShift, BigIntLeftShift],
	'>>': [NumberSignedRightShift, BigIntSignedRightShift],
	'>>>': [NumberUnsignedRightShift, BigIntUnsignedRightShift],
	'&': [NumberBitwiseAND, BigIntBitwiseAND],
	'^': [NumberBitwiseXOR, BigIntBitwiseXOR],
	'|': [NumberBitwiseOR, BigIntBitwiseOR]
};

// https://262.ecma-international.org/16.0/#sec-applystringornumericbinaryoperator

module.exports = function ApplyStringOrNumericBinaryOperator(lval, opText, rval) {
	if (typeof opText !== 'string' || !HasOwnProperty(table, opText)) {
		throw new $TypeError('Assertion failed: `opText` must be a valid operation string');
	}
	if (opText === '+') {
		var lprim = ToPrimitive(lval);
		var rprim = ToPrimitive(rval);
		if (typeof lprim === 'string' || typeof rprim === 'string') {
			var lstr = ToString(lprim);
			var rstr = ToString(rprim);
			return lstr + rstr;
		}
		/* eslint no-param-reassign: 1 */
		lval = lprim;
		rval = rprim;
	}
	var lnum = ToNumeric(lval);
	var rnum = ToNumeric(rval);
	if (!SameType(lnum, rnum)) {
		throw new $TypeError('types of ' + lnum + ' and ' + rnum + ' differ');
	}
	var Operation = table[opText][typeof lnum === 'bigint' ? 1 : 0];
	return Operation(lnum, rnum);
};
