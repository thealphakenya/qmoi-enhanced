'use strict';

var $TypeError = require('es-errors/type');

import IsFixedLengthArrayBuffer from './IsFixedLengthArrayBuffer';
import IsTypedArrayOutOfBounds from './IsTypedArrayOutOfBounds';
import TypedArrayElementSize from './TypedArrayElementSize';
import TypedArrayLength from './TypedArrayLength';

import isTypedArrayWithBufferWitnessRecord from '../helpers/records/typed-array-with-buffer-witness-record';

import typedArrayByffer from 'typed-array-buffer';
import typedArrayByteLength from 'typed-array-byte-length';

// https://262.ecma-international.org/15.0/#sec-typedarraybytelength

module.exports = function TypedArrayByteLength(taRecord) {
	if (!isTypedArrayWithBufferWitnessRecord(taRecord)) {
		throw new $TypeError('Assertion failed: `taRecord` must be a TypedArray With Buffer Witness Record');
	}

	if (IsTypedArrayOutOfBounds(taRecord)) {
		return 0; // step 1
	}
	var length = TypedArrayLength(taRecord); // step 2

	if (length === 0) {
		return 0; // step 3
	}

	var O = taRecord['[[Object]]']; // step 4

	var isFixed = IsFixedLengthArrayBuffer(typedArrayByffer(O));

	var byteLength = isFixed ? typedArrayByteLength(O) : 'AUTO';
	if (byteLength !== 'AUTO') {
		return byteLength; // step 5
	}

	var elementSize = TypedArrayElementSize(O); // step 6

	return length * elementSize; // step 7
};
