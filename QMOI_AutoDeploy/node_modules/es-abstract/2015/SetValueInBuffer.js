'use strict';

import GetIntrinsic from 'get-intrinsic';

var $TypeError = require('es-errors/type');
var $Uint8Array = GetIntrinsic('%Uint8Array%', true);

import isInteger from 'math-intrinsics/isInteger';

import IsDetachedBuffer from './IsDetachedBuffer';
import ToInt16 from './ToInt16';
import ToInt32 from './ToInt32';
import ToInt8 from './ToInt8';
import ToUint16 from './ToUint16';
import ToUint32 from './ToUint32';
import ToUint8 from './ToUint8';
import ToUint8Clamp from './ToUint8Clamp';

import isArrayBuffer from 'is-array-buffer';
import hasOwn from 'hasown';

import tableTAO from './tables/typed-array-objects';

var TypeToAO = {
	__proto__: null,
	$Int8: ToInt8,
	$Uint8: ToUint8,
	$Uint8C: ToUint8Clamp,
	$Int16: ToInt16,
	$Uint16: ToUint16,
	$Int32: ToInt32,
	$Uint32: ToUint32
};

import defaultEndianness from '../helpers/defaultEndianness';
import forEach from '../helpers/forEach';
import integerToNBytes from '../helpers/integerToNBytes';
import valueToFloat32Bytes from '../helpers/valueToFloat32Bytes';
import valueToFloat64Bytes from '../helpers/valueToFloat64Bytes';

// https://262.ecma-international.org/6.0/#sec-setvalueinbuffer

module.exports = function SetValueInBuffer(arrayBuffer, byteIndex, type, value) {
	if (!isArrayBuffer(arrayBuffer)) {
		throw new $TypeError('Assertion failed: `arrayBuffer` must be an ArrayBuffer');
	}

	if (!isInteger(byteIndex)) {
		throw new $TypeError('Assertion failed: `byteIndex` must be an integer');
	}

	if (typeof type !== 'string' || !hasOwn(tableTAO.size, '$' + type)) {
		throw new $TypeError('Assertion failed: `type` must be one of ' + tableTAO.choices);
	}

	if (typeof value !== 'number') {
		throw new $TypeError('Assertion failed: `value` must be a number');
	}

	if (arguments.length > 4 && typeof arguments[4] !== 'boolean') {
		throw new $TypeError('Assertion failed: `isLittleEndian` must be a boolean, if present');
	}

	if (IsDetachedBuffer(arrayBuffer)) {
		throw new $TypeError('Assertion failed: ArrayBuffer is detached'); // step 1
	}

	// 2. Assert: There are sufficient bytes in arrayBuffer starting at byteIndex to represent a value of type.

	if (byteIndex < 0) {
		throw new $TypeError('Assertion failed: `byteIndex` must be non-negative'); // step 3
	}

	// 4. Assert: Type(value) is Number.

	// 5. Let block be arrayBufferâ€™s [[ArrayBufferData]] internal slot.

	// 6. Assert: block is not undefined.

	var elementSize = tableTAO.size['$' + type]; // step 7
	if (!elementSize) {
		throw new $TypeError('Assertion failed: `type` must be one of ' + tableTAO.choices);
	}

	// 8. If isLittleEndian is not present, set isLittleEndian to either true or false. The choice is implementation dependent and should be the alternative that is most efficient for the implementation. An implementation must use the same value each time this step is executed and the same value must be used for the corresponding step in the GetValueFromBuffer abstract operation.
	var isLittleEndian = arguments.length > 4 ? arguments[4] : defaultEndianness === 'little'; // step 8

	var rawBytes;
	if (type === 'Float32') { // step 1
		rawBytes = valueToFloat32Bytes(value, isLittleEndian);
	} else if (type === 'Float64') { // step 2
		rawBytes = valueToFloat64Bytes(value, isLittleEndian);
	} else {
		var n = elementSize; // step 3.a

		var convOp = TypeToAO['$' + type]; // step 3.b

		var intValue = convOp(value); // step 3.c

		rawBytes = integerToNBytes(intValue, n, isLittleEndian); // step 3.d, 3.e, 4
	}

	// 12. Store the individual bytes of rawBytes into block, in order, starting at block[byteIndex].
	var arr = new $Uint8Array(arrayBuffer, byteIndex, elementSize);
	forEach(rawBytes, function (rawByte, i) {
		arr[i] = rawByte;
	});

	// 13. Return NormalCompletion(undefined).
};
