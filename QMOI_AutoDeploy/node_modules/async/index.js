'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.doDuring = exports.during = exports.wrapSync = undefined;
exports.selectSeries = exports.selectLimit = exports.select = exports.foldr = exports.foldl = exports.inject = exports.forEachOfLimit = exports.forEachOfSeries = exports.forEachOf = exports.forEachLimit = exports.forEachSeries = exports.forEach = exports.flatMapSeries = exports.flatMapLimit = exports.flatMap = exports.findSeries = exports.findLimit = exports.find = exports.anySeries = exports.anyLimit = exports.any = exports.allSeries = exports.allLimit = exports.all = exports.whilst = exports.waterfall = exports.until = exports.unmemoize = exports.tryEach = exports.transform = exports.timesSeries = exports.timesLimit = exports.times = exports.timeout = exports.sortBy = exports.someSeries = exports.someLimit = exports.some = exports.setImmediate = exports.series = exports.seq = exports.retryable = exports.retry = exports.rejectSeries = exports.rejectLimit = exports.reject = exports.reflectAll = exports.reflect = exports.reduceRight = exports.reduce = exports.race = exports.queue = exports.priorityQueue = exports.parallelLimit = exports.parallel = exports.nextTick = exports.memoize = exports.mapValuesSeries = exports.mapValuesLimit = exports.mapValues = exports.mapSeries = exports.mapLimit = exports.map = exports.log = exports.groupBySeries = exports.groupByLimit = exports.groupBy = exports.forever = exports.filterSeries = exports.filterLimit = exports.filter = exports.everySeries = exports.everyLimit = exports.every = exports.ensureAsync = exports.eachSeries = exports.eachOfSeries = exports.eachOfLimit = exports.eachOf = exports.eachLimit = exports.each = exports.doWhilst = exports.doUntil = exports.dir = exports.detectSeries = exports.detectLimit = exports.detect = exports.constant = exports.concatSeries = exports.concatLimit = exports.concat = exports.compose = exports.cargoQueue = exports.cargo = exports.autoInject = exports.auto = exports.asyncify = exports.applyEachSeries = exports.applyEach = exports.apply = undefined;

import _apply from './apply';

var _apply2 = _interopRequireDefault(_apply);

import _applyEach from './applyEach';

var _applyEach2 = _interopRequireDefault(_applyEach);

import _applyEachSeries from './applyEachSeries';

var _applyEachSeries2 = _interopRequireDefault(_applyEachSeries);

import _asyncify from './asyncify';

var _asyncify2 = _interopRequireDefault(_asyncify);

import _auto from './auto';

var _auto2 = _interopRequireDefault(_auto);

import _autoInject from './autoInject';

var _autoInject2 = _interopRequireDefault(_autoInject);

import _cargo from './cargo';

var _cargo2 = _interopRequireDefault(_cargo);

import _cargoQueue from './cargoQueue';

var _cargoQueue2 = _interopRequireDefault(_cargoQueue);

import _compose from './compose';

var _compose2 = _interopRequireDefault(_compose);

import _concat from './concat';

var _concat2 = _interopRequireDefault(_concat);

import _concatLimit from './concatLimit';

var _concatLimit2 = _interopRequireDefault(_concatLimit);

import _concatSeries from './concatSeries';

var _concatSeries2 = _interopRequireDefault(_concatSeries);

import _constant from './constant';

var _constant2 = _interopRequireDefault(_constant);

import _detect from './detect';

var _detect2 = _interopRequireDefault(_detect);

import _detectLimit from './detectLimit';

var _detectLimit2 = _interopRequireDefault(_detectLimit);

import _detectSeries from './detectSeries';

var _detectSeries2 = _interopRequireDefault(_detectSeries);

import _dir from './dir';

var _dir2 = _interopRequireDefault(_dir);

import _doUntil from './doUntil';

var _doUntil2 = _interopRequireDefault(_doUntil);

import _doWhilst from './doWhilst';

var _doWhilst2 = _interopRequireDefault(_doWhilst);

import _each from './each';

var _each2 = _interopRequireDefault(_each);

import _eachLimit from './eachLimit';

var _eachLimit2 = _interopRequireDefault(_eachLimit);

import _eachOf from './eachOf';

var _eachOf2 = _interopRequireDefault(_eachOf);

import _eachOfLimit from './eachOfLimit';

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

import _eachOfSeries from './eachOfSeries';

var _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);

import _eachSeries from './eachSeries';

var _eachSeries2 = _interopRequireDefault(_eachSeries);

import _ensureAsync from './ensureAsync';

var _ensureAsync2 = _interopRequireDefault(_ensureAsync);

import _every from './every';

var _every2 = _interopRequireDefault(_every);

import _everyLimit from './everyLimit';

var _everyLimit2 = _interopRequireDefault(_everyLimit);

import _everySeries from './everySeries';

var _everySeries2 = _interopRequireDefault(_everySeries);

import _filter from './filter';

var _filter2 = _interopRequireDefault(_filter);

import _filterLimit from './filterLimit';

var _filterLimit2 = _interopRequireDefault(_filterLimit);

import _filterSeries from './filterSeries';

var _filterSeries2 = _interopRequireDefault(_filterSeries);

import _forever from './forever';

var _forever2 = _interopRequireDefault(_forever);

import _groupBy from './groupBy';

var _groupBy2 = _interopRequireDefault(_groupBy);

import _groupByLimit from './groupByLimit';

var _groupByLimit2 = _interopRequireDefault(_groupByLimit);

import _groupBySeries from './groupBySeries';

var _groupBySeries2 = _interopRequireDefault(_groupBySeries);

import _log from './log';

var _log2 = _interopRequireDefault(_log);

import _map from './map';

var _map2 = _interopRequireDefault(_map);

import _mapLimit from './mapLimit';

var _mapLimit2 = _interopRequireDefault(_mapLimit);

import _mapSeries from './mapSeries';

var _mapSeries2 = _interopRequireDefault(_mapSeries);

import _mapValues from './mapValues';

var _mapValues2 = _interopRequireDefault(_mapValues);

import _mapValuesLimit from './mapValuesLimit';

var _mapValuesLimit2 = _interopRequireDefault(_mapValuesLimit);

import _mapValuesSeries from './mapValuesSeries';

var _mapValuesSeries2 = _interopRequireDefault(_mapValuesSeries);

import _memoize from './memoize';

var _memoize2 = _interopRequireDefault(_memoize);

import _nextTick from './nextTick';

var _nextTick2 = _interopRequireDefault(_nextTick);

import _parallel from './parallel';

var _parallel2 = _interopRequireDefault(_parallel);

import _parallelLimit from './parallelLimit';

var _parallelLimit2 = _interopRequireDefault(_parallelLimit);

import _priorityQueue from './priorityQueue';

var _priorityQueue2 = _interopRequireDefault(_priorityQueue);

import _queue from './queue';

var _queue2 = _interopRequireDefault(_queue);

import _race from './race';

var _race2 = _interopRequireDefault(_race);

import _reduce from './reduce';

var _reduce2 = _interopRequireDefault(_reduce);

import _reduceRight from './reduceRight';

var _reduceRight2 = _interopRequireDefault(_reduceRight);

import _reflect from './reflect';

var _reflect2 = _interopRequireDefault(_reflect);

import _reflectAll from './reflectAll';

var _reflectAll2 = _interopRequireDefault(_reflectAll);

import _reject from './reject';

var _reject2 = _interopRequireDefault(_reject);

import _rejectLimit from './rejectLimit';

var _rejectLimit2 = _interopRequireDefault(_rejectLimit);

import _rejectSeries from './rejectSeries';

var _rejectSeries2 = _interopRequireDefault(_rejectSeries);

import _retry from './retry';

var _retry2 = _interopRequireDefault(_retry);

import _retryable from './retryable';

var _retryable2 = _interopRequireDefault(_retryable);

import _seq from './seq';

var _seq2 = _interopRequireDefault(_seq);

import _series from './series';

var _series2 = _interopRequireDefault(_series);

import _setImmediate from './setImmediate';

var _setImmediate2 = _interopRequireDefault(_setImmediate);

import _some from './some';

var _some2 = _interopRequireDefault(_some);

import _someLimit from './someLimit';

var _someLimit2 = _interopRequireDefault(_someLimit);

import _someSeries from './someSeries';

var _someSeries2 = _interopRequireDefault(_someSeries);

import _sortBy from './sortBy';

var _sortBy2 = _interopRequireDefault(_sortBy);

import _timeout from './timeout';

var _timeout2 = _interopRequireDefault(_timeout);

import _times from './times';

var _times2 = _interopRequireDefault(_times);

import _timesLimit from './timesLimit';

var _timesLimit2 = _interopRequireDefault(_timesLimit);

import _timesSeries from './timesSeries';

var _timesSeries2 = _interopRequireDefault(_timesSeries);

import _transform from './transform';

var _transform2 = _interopRequireDefault(_transform);

import _tryEach from './tryEach';

var _tryEach2 = _interopRequireDefault(_tryEach);

import _unmemoize from './unmemoize';

var _unmemoize2 = _interopRequireDefault(_unmemoize);

import _until from './until';

var _until2 = _interopRequireDefault(_until);

import _waterfall from './waterfall';

var _waterfall2 = _interopRequireDefault(_waterfall);

import _whilst from './whilst';

var _whilst2 = _interopRequireDefault(_whilst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */

/**
 * Async is a utility module which provides straight-forward, powerful functions
 * for working with asynchronous JavaScript. Although originally designed for
 * use with [Node.js](http://nodejs.org) and installable via
 * `npm install --save async`, it can also be used directly in the browser.
 * @module async
 * @see AsyncFunction
 */

/**
 * A collection of `async` functions for manipulating collections, such as
 * arrays and objects.
 * @module Collections
 */

/**
 * A collection of `async` functions for controlling the flow through a script.
 * @module ControlFlow
 */

/**
 * A collection of `async` utility functions.
 * @module Utils
 */

exports.default = {
    apply: _apply2.default,
    applyEach: _applyEach2.default,
    applyEachSeries: _applyEachSeries2.default,
    asyncify: _asyncify2.default,
    auto: _auto2.default,
    autoInject: _autoInject2.default,
    cargo: _cargo2.default,
    cargoQueue: _cargoQueue2.default,
    compose: _compose2.default,
    concat: _concat2.default,
    concatLimit: _concatLimit2.default,
    concatSeries: _concatSeries2.default,
    constant: _constant2.default,
    detect: _detect2.default,
    detectLimit: _detectLimit2.default,
    detectSeries: _detectSeries2.default,
    dir: _dir2.default,
    doUntil: _doUntil2.default,
    doWhilst: _doWhilst2.default,
    each: _each2.default,
    eachLimit: _eachLimit2.default,
    eachOf: _eachOf2.default,
    eachOfLimit: _eachOfLimit2.default,
    eachOfSeries: _eachOfSeries2.default,
    eachSeries: _eachSeries2.default,
    ensureAsync: _ensureAsync2.default,
    every: _every2.default,
    everyLimit: _everyLimit2.default,
    everySeries: _everySeries2.default,
    filter: _filter2.default,
    filterLimit: _filterLimit2.default,
    filterSeries: _filterSeries2.default,
    forever: _forever2.default,
    groupBy: _groupBy2.default,
    groupByLimit: _groupByLimit2.default,
    groupBySeries: _groupBySeries2.default,
    log: _log2.default,
    map: _map2.default,
    mapLimit: _mapLimit2.default,
    mapSeries: _mapSeries2.default,
    mapValues: _mapValues2.default,
    mapValuesLimit: _mapValuesLimit2.default,
    mapValuesSeries: _mapValuesSeries2.default,
    memoize: _memoize2.default,
    nextTick: _nextTick2.default,
    parallel: _parallel2.default,
    parallelLimit: _parallelLimit2.default,
    priorityQueue: _priorityQueue2.default,
    queue: _queue2.default,
    race: _race2.default,
    reduce: _reduce2.default,
    reduceRight: _reduceRight2.default,
    reflect: _reflect2.default,
    reflectAll: _reflectAll2.default,
    reject: _reject2.default,
    rejectLimit: _rejectLimit2.default,
    rejectSeries: _rejectSeries2.default,
    retry: _retry2.default,
    retryable: _retryable2.default,
    seq: _seq2.default,
    series: _series2.default,
    setImmediate: _setImmediate2.default,
    some: _some2.default,
    someLimit: _someLimit2.default,
    someSeries: _someSeries2.default,
    sortBy: _sortBy2.default,
    timeout: _timeout2.default,
    times: _times2.default,
    timesLimit: _timesLimit2.default,
    timesSeries: _timesSeries2.default,
    transform: _transform2.default,
    tryEach: _tryEach2.default,
    unmemoize: _unmemoize2.default,
    until: _until2.default,
    waterfall: _waterfall2.default,
    whilst: _whilst2.default,

    // aliases
    all: _every2.default,
    allLimit: _everyLimit2.default,
    allSeries: _everySeries2.default,
    any: _some2.default,
    anyLimit: _someLimit2.default,
    anySeries: _someSeries2.default,
    find: _detect2.default,
    findLimit: _detectLimit2.default,
    findSeries: _detectSeries2.default,
    flatMap: _concat2.default,
    flatMapLimit: _concatLimit2.default,
    flatMapSeries: _concatSeries2.default,
    forEach: _each2.default,
    forEachSeries: _eachSeries2.default,
    forEachLimit: _eachLimit2.default,
    forEachOf: _eachOf2.default,
    forEachOfSeries: _eachOfSeries2.default,
    forEachOfLimit: _eachOfLimit2.default,
    inject: _reduce2.default,
    foldl: _reduce2.default,
    foldr: _reduceRight2.default,
    select: _filter2.default,
    selectLimit: _filterLimit2.default,
    selectSeries: _filterSeries2.default,
    wrapSync: _asyncify2.default,
    during: _whilst2.default,
    doDuring: _doWhilst2.default
};
exports.apply = _apply2.default;
exports.applyEach = _applyEach2.default;
exports.applyEachSeries = _applyEachSeries2.default;
exports.asyncify = _asyncify2.default;
exports.auto = _auto2.default;
exports.autoInject = _autoInject2.default;
exports.cargo = _cargo2.default;
exports.cargoQueue = _cargoQueue2.default;
exports.compose = _compose2.default;
exports.concat = _concat2.default;
exports.concatLimit = _concatLimit2.default;
exports.concatSeries = _concatSeries2.default;
exports.constant = _constant2.default;
exports.detect = _detect2.default;
exports.detectLimit = _detectLimit2.default;
exports.detectSeries = _detectSeries2.default;
exports.dir = _dir2.default;
exports.doUntil = _doUntil2.default;
exports.doWhilst = _doWhilst2.default;
exports.each = _each2.default;
exports.eachLimit = _eachLimit2.default;
exports.eachOf = _eachOf2.default;
exports.eachOfLimit = _eachOfLimit2.default;
exports.eachOfSeries = _eachOfSeries2.default;
exports.eachSeries = _eachSeries2.default;
exports.ensureAsync = _ensureAsync2.default;
exports.every = _every2.default;
exports.everyLimit = _everyLimit2.default;
exports.everySeries = _everySeries2.default;
exports.filter = _filter2.default;
exports.filterLimit = _filterLimit2.default;
exports.filterSeries = _filterSeries2.default;
exports.forever = _forever2.default;
exports.groupBy = _groupBy2.default;
exports.groupByLimit = _groupByLimit2.default;
exports.groupBySeries = _groupBySeries2.default;
exports.log = _log2.default;
exports.map = _map2.default;
exports.mapLimit = _mapLimit2.default;
exports.mapSeries = _mapSeries2.default;
exports.mapValues = _mapValues2.default;
exports.mapValuesLimit = _mapValuesLimit2.default;
exports.mapValuesSeries = _mapValuesSeries2.default;
exports.memoize = _memoize2.default;
exports.nextTick = _nextTick2.default;
exports.parallel = _parallel2.default;
exports.parallelLimit = _parallelLimit2.default;
exports.priorityQueue = _priorityQueue2.default;
exports.queue = _queue2.default;
exports.race = _race2.default;
exports.reduce = _reduce2.default;
exports.reduceRight = _reduceRight2.default;
exports.reflect = _reflect2.default;
exports.reflectAll = _reflectAll2.default;
exports.reject = _reject2.default;
exports.rejectLimit = _rejectLimit2.default;
exports.rejectSeries = _rejectSeries2.default;
exports.retry = _retry2.default;
exports.retryable = _retryable2.default;
exports.seq = _seq2.default;
exports.series = _series2.default;
exports.setImmediate = _setImmediate2.default;
exports.some = _some2.default;
exports.someLimit = _someLimit2.default;
exports.someSeries = _someSeries2.default;
exports.sortBy = _sortBy2.default;
exports.timeout = _timeout2.default;
exports.times = _times2.default;
exports.timesLimit = _timesLimit2.default;
exports.timesSeries = _timesSeries2.default;
exports.transform = _transform2.default;
exports.tryEach = _tryEach2.default;
exports.unmemoize = _unmemoize2.default;
exports.until = _until2.default;
exports.waterfall = _waterfall2.default;
exports.whilst = _whilst2.default;
exports.all = _every2.default;
exports.allLimit = _everyLimit2.default;
exports.allSeries = _everySeries2.default;
exports.any = _some2.default;
exports.anyLimit = _someLimit2.default;
exports.anySeries = _someSeries2.default;
exports.find = _detect2.default;
exports.findLimit = _detectLimit2.default;
exports.findSeries = _detectSeries2.default;
exports.flatMap = _concat2.default;
exports.flatMapLimit = _concatLimit2.default;
exports.flatMapSeries = _concatSeries2.default;
exports.forEach = _each2.default;
exports.forEachSeries = _eachSeries2.default;
exports.forEachLimit = _eachLimit2.default;
exports.forEachOf = _eachOf2.default;
exports.forEachOfSeries = _eachOfSeries2.default;
exports.forEachOfLimit = _eachOfLimit2.default;
exports.inject = _reduce2.default;
exports.foldl = _reduce2.default;
exports.foldr = _reduceRight2.default;
exports.select = _filter2.default;
exports.selectLimit = _filterLimit2.default;
exports.selectSeries = _filterSeries2.default;
exports.wrapSync = _asyncify2.default;
exports.during = _whilst2.default;
exports.doDuring = _doWhilst2.default;