#!/usr/bin/env node

const https = require("https");
const fs = require("fs");
const path = require("path");

class GitpodNotificationService {
  constructor() {
    this.gitpodToken = process.env.GITPOD_API_TOKEN;
    this.gitpodUrl = process.env.GITPOD_URL || "https://api.gitpod.io/v1";
    this.gitlabToken =
      process.env.GITLAB_TOKEN || process.env.GITLAB_ACCESS_TOKEN;
    this.gitlabUrl = process.env.GITLAB_URL || "https://gitlab.com";
    this.projectId = process.env.GITLAB_PROJECT_ID;
    this.branch = process.env.CI_COMMIT_REF_NAME || "main";
    this.commitSha = process.env.CI_COMMIT_SHA;
    this.jobId = process.env.CI_JOB_ID;
    this.pipelineId = process.env.CI_PIPELINE_ID;

    this.logFile = path.join(process.cwd(), "logs", "gitpod-notifications.log");
    this.ensureLogDir();
  }

  ensureLogDir() {
    const logDir = path.dirname(this.logFile);
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }
  }

  log(message, level = "INFO") {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${level}] ${message}\n`;
    fs.appendFileSync(this.logFile, logEntry);
    console.log(`[${level}] ${message}`);
  }

  async makeGitpodRequest(endpoint, method = "GET", body = null) {
    return new Promise((resolve, reject) => {
      const options = {
        hostname: new URL(this.gitpodUrl).hostname,
        port: 443,
        path: endpoint,
        method,
        headers: {
          Authorization: `Bearer ${this.gitpodToken}`,
          "Content-Type": "application/json",
          "User-Agent": "QMOI-Gitpod-Notifications/1.0",
        },
      };

      const req = https.request(options, (res) => {
        let data = "";
        res.on("data", (chunk) => (data += chunk));
        res.on("end", () => {
          try {
            const jsonData = JSON.parse(data);
            resolve(jsonData);
          } catch (e) {
            resolve(data);
          }
        });
      });

      req.on("error", reject);
      if (body) {
        req.write(JSON.stringify(body));
      }
      req.end();
    });
  }

  async makeGitLabRequest(endpoint, method = "GET", body = null) {
    return new Promise((resolve, reject) => {
      const options = {
        hostname: new URL(this.gitlabUrl).hostname,
        port: 443,
        path: `/api/v4${endpoint}`,
        method,
        headers: {
          Authorization: `Bearer ${this.gitlabToken}`,
          "Content-Type": "application/json",
          "User-Agent": "QMOI-Gitpod-Notifications/1.0",
        },
      };

      const req = https.request(options, (res) => {
        let data = "";
        res.on("data", (chunk) => (data += chunk));
        res.on("end", () => {
          try {
            const jsonData = JSON.parse(data);
            resolve(jsonData);
          } catch (e) {
            resolve(data);
          }
        });
      });

      req.on("error", reject);
      if (body) {
        req.write(JSON.stringify(body));
      }
      req.end();
    });
  }

  async createGitLabIssue(
    title,
    description,
    labels = ["qmoi", "gitpod", "notification"],
  ) {
    try {
      const issue = await this.makeGitLabRequest(
        `/projects/${this.projectId}/issues`,
        "POST",
        {
          title,
          description,
          labels: labels.join(","),
          confidential: false,
        },
      );
      this.log(`Created GitLab issue: ${issue.iid} - ${title}`);
      return issue;
    } catch (error) {
      this.log(`Failed to create GitLab issue: ${error.message}`, "ERROR");
      return null;
    }
  }

  async sendGitpodNotification(type, data = {}) {
    try {
      const timestamp = new Date().toISOString();
      const gitpodUrl = `https://gitpod.io/#${data.workspaceId || "workspace"}`;

      let title, description, labels;

      switch (type) {
        case "workspace_started":
          title = `üöÄ QMOI Gitpod Workspace Started - ${timestamp}`;
          description = `## QMOI Gitpod Workspace Started

### Workspace Details:
- **Workspace ID**: ${data.workspaceId || "Unknown"}
- **Branch**: ${this.branch}
- **Commit**: ${this.commitSha}
- **Pipeline ID**: ${this.pipelineId}
- **Job ID**: ${this.jobId}
- **Timestamp**: ${timestamp}

### Workspace URL:
${gitpodUrl}

### Status:
Gitpod workspace has been started and is ready for development.

### Features Available:
- Full development environment
- Integrated terminal
- Code editor
- Git integration
- QMOI automation tools

---
*Generated by QMOI Gitpod Notification Service*`;
          labels = ["qmoi", "gitpod", "workspace", "started"];
          break;

        case "workspace_stopped":
          title = `‚èπÔ∏è QMOI Gitpod Workspace Stopped - ${timestamp}`;
          description = `## QMOI Gitpod Workspace Stopped

### Workspace Details:
- **Workspace ID**: ${data.workspaceId || "Unknown"}
- **Branch**: ${this.branch}
- **Commit**: ${this.commitSha}
- **Pipeline ID**: ${this.pipelineId}
- **Job ID**: ${this.jobId}
- **Timestamp**: ${timestamp}

### Workspace URL:
${gitpodUrl}

### Status:
Gitpod workspace has been stopped.

### Next Steps:
- Review any unsaved changes
- Commit important work
- Restart if needed

---
*Generated by QMOI Gitpod Notification Service*`;
          labels = ["qmoi", "gitpod", "workspace", "stopped"];
          break;

        case "workspace_cloned":
          title = `üìã QMOI Gitpod Workspace Cloned - ${timestamp}`;
          description = `## QMOI Gitpod Workspace Cloned

### Workspace Details:
- **Workspace ID**: ${data.workspaceId || "Unknown"}
- **Original Workspace**: ${data.originalWorkspaceId || "Unknown"}
- **Branch**: ${this.branch}
- **Commit**: ${this.commitSha}
- **Pipeline ID**: ${this.pipelineId}
- **Job ID**: ${this.jobId}
- **Timestamp**: ${timestamp}

### Workspace URL:
${gitpodUrl}

### Clone Information:
- Snapshot created successfully
- All files and configurations preserved
- Ready for independent development

### Benefits:
- Isolated development environment
- No conflicts with original workspace
- Safe experimentation
- Backup of work in progress

---
*Generated by QMOI Gitpod Notification Service*`;
          labels = ["qmoi", "gitpod", "workspace", "cloned"];
          break;

        case "workspace_synced":
          title = `üîÑ QMOI Gitpod Workspace Synced - ${timestamp}`;
          description = `## QMOI Gitpod Workspace Synced

### Workspace Details:
- **Workspace ID**: ${data.workspaceId || "Unknown"}
- **Sync Type**: ${data.syncType || "Unknown"}
- **Branch**: ${this.branch}
- **Commit**: ${this.commitSha}
- **Pipeline ID**: ${this.pipelineId}
- **Job ID**: ${this.jobId}
- **Timestamp**: ${timestamp}

### Workspace URL:
${gitpodUrl}

### Sync Details:
- Files synchronized successfully
- Dependencies updated
- Configuration refreshed
- Environment variables updated

### Sync Benefits:
- Latest code changes
- Updated dependencies
- Fresh environment
- Consistent state

---
*Generated by QMOI Gitpod Notification Service*`;
          labels = ["qmoi", "gitpod", "workspace", "synced"];
          break;

        case "workspace_error":
          title = `‚ùå QMOI Gitpod Workspace Error - ${timestamp}`;
          description = `## QMOI Gitpod Workspace Error

### Workspace Details:
- **Workspace ID**: ${data.workspaceId || "Unknown"}
- **Error Type**: ${data.errorType || "Unknown"}
- **Branch**: ${this.branch}
- **Commit**: ${this.commitSha}
- **Pipeline ID**: ${this.pipelineId}
- **Job ID**: ${this.jobId}
- **Timestamp**: ${timestamp}

### Error Details:
\`\`\`
${data.error || "Unknown error occurred"}
\`\`\`

### Workspace URL:
${gitpodUrl}

### Recovery Steps:
1. Check workspace logs
2. Restart the workspace
3. Verify Gitpod configuration
4. Check resource limits
5. Contact support if needed

### Common Issues:
- Resource constraints
- Network connectivity
- Configuration errors
- Permission issues
- Dependency problems

---
*Generated by QMOI Gitpod Notification Service*`;
          labels = ["qmoi", "gitpod", "workspace", "error", "needs-attention"];
          break;

        case "qmoi_integration":
          title = `üîó QMOI Gitpod Integration - ${timestamp}`;
          description = `## QMOI Gitpod Integration Status

### Integration Details:
- **Workspace ID**: ${data.workspaceId || "Unknown"}
- **Integration Type**: ${data.integrationType || "QMOI Setup"}
- **Branch**: ${this.branch}
- **Commit**: ${this.commitSha}
- **Pipeline ID**: ${this.pipelineId}
- **Job ID**: ${this.jobId}
- **Timestamp**: ${timestamp}

### Workspace URL:
${gitpodUrl}

### QMOI Features Available:
- Automated setup and configuration
- Error detection and recovery
- Real-time notifications
- Health monitoring
- Git integration
- Build automation
- Test execution
- Deployment management

### Integration Status:
${data.status || "Active"}

### Next Steps:
- Monitor automation progress
- Review notifications
- Check health status
- Verify all features

---
*Generated by QMOI Gitpod Notification Service*`;
          labels = ["qmoi", "gitpod", "integration", "active"];
          break;

        default:
          title = `üì¢ QMOI Gitpod Notification - ${timestamp}`;
          description = `## QMOI Gitpod Notification

### Details:
- **Workspace ID**: ${data.workspaceId || "Unknown"}
- **Type**: ${type}
- **Branch**: ${this.branch}
- **Commit**: ${this.commitSha}
- **Pipeline ID**: ${this.pipelineId}
- **Job ID**: ${this.jobId}
- **Timestamp**: ${timestamp}

### Workspace URL:
${gitpodUrl}

---
*Generated by QMOI Gitpod Notification Service*`;
          labels = ["qmoi", "gitpod", "notification"];
      }

      // Create GitLab issue
      const issue = await this.createGitLabIssue(title, description, labels);

      // Send to Gitpod API if available
      if (data.workspaceId && this.gitpodToken) {
        try {
          await this.makeGitpodRequest(
            `/workspaces/${data.workspaceId}/notifications`,
            "POST",
            {
              title,
              message: description,
              type: "qmoi_notification",
            },
          );
          this.log(
            `Sent notification to Gitpod workspace: ${data.workspaceId}`,
          );
        } catch (error) {
          this.log(
            `Failed to send Gitpod notification: ${error.message}`,
            "WARN",
          );
        }
      }

      this.log(`Gitpod notification sent: ${type}`);
      return issue;
    } catch (error) {
      this.log(`Failed to send Gitpod notification: ${error.message}`, "ERROR");
      throw error;
    }
  }

  async monitorGitpodWorkspaces() {
    try {
      this.log("Monitoring Gitpod workspaces...");

      if (!this.gitpodToken) {
        this.log(
          "No Gitpod token available, skipping workspace monitoring",
          "WARN",
        );
        return [];
      }

      const workspaces = await this.makeGitpodRequest("/workspaces");

      for (const workspace of workspaces.workspaces || []) {
        // Check if workspace is related to this project
        if (
          workspace.context &&
          workspace.context.url &&
          workspace.context.url.includes(this.projectId)
        ) {
          this.log(`Found related workspace: ${workspace.id}`);

          // Send workspace status notification
          await this.sendGitpodNotification("qmoi_integration", {
            workspaceId: workspace.id,
            integrationType: "Workspace Monitoring",
            status: workspace.status,
          });
        }
      }

      this.log(`Monitored ${workspaces.workspaces?.length || 0} workspaces`);
      return workspaces.workspaces || [];
    } catch (error) {
      this.log(
        `Failed to monitor Gitpod workspaces: ${error.message}`,
        "ERROR",
      );
      throw error;
    }
  }

  async startGitpodWorkspace(contextUrl) {
    try {
      this.log(`Starting Gitpod workspace for: ${contextUrl}`);

      if (!this.gitpodToken) {
        throw new Error("No Gitpod token available");
      }

      const workspace = await this.makeGitpodRequest("/workspaces", "POST", {
        contextUrl,
        description: `QMOI Development Workspace - ${new Date().toISOString()}`,
      });

      this.log(`Gitpod workspace started: ${workspace.id}`);

      // Send notification
      await this.sendGitpodNotification("workspace_started", {
        workspaceId: workspace.id,
      });

      return workspace;
    } catch (error) {
      this.log(`Failed to start Gitpod workspace: ${error.message}`, "ERROR");

      // Send error notification
      await this.sendGitpodNotification("workspace_error", {
        errorType: "Start Failed",
        error: error.message,
      });

      throw error;
    }
  }

  async stopGitpodWorkspace(workspaceId) {
    try {
      this.log(`Stopping Gitpod workspace: ${workspaceId}`);

      if (!this.gitpodToken) {
        throw new Error("No Gitpod token available");
      }

      await this.makeGitpodRequest(`/workspaces/${workspaceId}`, "DELETE");

      this.log(`Gitpod workspace stopped: ${workspaceId}`);

      // Send notification
      await this.sendGitpodNotification("workspace_stopped", {
        workspaceId: workspaceId,
      });
    } catch (error) {
      this.log(`Failed to stop Gitpod workspace: ${error.message}`, "ERROR");

      // Send error notification
      await this.sendGitpodNotification("workspace_error", {
        workspaceId: workspaceId,
        errorType: "Stop Failed",
        error: error.message,
      });

      throw error;
    }
  }

  async cloneGitpodWorkspace(workspaceId) {
    try {
      this.log(`Cloning Gitpod workspace: ${workspaceId}`);

      if (!this.gitpodToken) {
        throw new Error("No Gitpod token available");
      }

      const snapshot = await this.makeGitpodRequest(
        `/workspaces/${workspaceId}/snapshot`,
        "POST",
      );

      this.log(`Gitpod workspace cloned: ${snapshot.id}`);

      // Send notification
      await this.sendGitpodNotification("workspace_cloned", {
        workspaceId: snapshot.id,
        originalWorkspaceId: workspaceId,
      });

      return snapshot;
    } catch (error) {
      this.log(`Failed to clone Gitpod workspace: ${error.message}`, "ERROR");

      // Send error notification
      await this.sendGitpodNotification("workspace_error", {
        workspaceId: workspaceId,
        errorType: "Clone Failed",
        error: error.message,
      });

      throw error;
    }
  }

  async syncGitpodWorkspace(workspaceId, syncType = "git") {
    try {
      this.log(`Syncing Gitpod workspace: ${workspaceId} (${syncType})`);

      if (!this.gitpodToken) {
        throw new Error("No Gitpod token available");
      }

      // Trigger workspace sync
      await this.makeGitpodRequest(`/workspaces/${workspaceId}/sync`, "POST", {
        type: syncType,
      });

      this.log(`Gitpod workspace synced: ${workspaceId}`);

      // Send notification
      await this.sendGitpodNotification("workspace_synced", {
        workspaceId: workspaceId,
        syncType: syncType,
      });
    } catch (error) {
      this.log(`Failed to sync Gitpod workspace: ${error.message}`, "ERROR");

      // Send error notification
      await this.sendGitpodNotification("workspace_error", {
        workspaceId: workspaceId,
        errorType: "Sync Failed",
        error: error.message,
      });

      throw error;
    }
  }
}

// Main execution
async function main() {
  const notificationService = new GitpodNotificationService();

  try {
    const args = process.argv.slice(2);
    const command = args[0];
    const data = args[1] ? JSON.parse(args[1]) : {};

    switch (command) {
      case "--workspace-started":
        await notificationService.sendGitpodNotification(
          "workspace_started",
          data,
        );
        break;
      case "--workspace-stopped":
        await notificationService.sendGitpodNotification(
          "workspace_stopped",
          data,
        );
        break;
      case "--workspace-cloned":
        await notificationService.sendGitpodNotification(
          "workspace_cloned",
          data,
        );
        break;
      case "--workspace-synced":
        await notificationService.sendGitpodNotification(
          "workspace_synced",
          data,
        );
        break;
      case "--workspace-error":
        await notificationService.sendGitpodNotification(
          "workspace_error",
          data,
        );
        break;
      case "--qmoi-integration":
        await notificationService.sendGitpodNotification(
          "qmoi_integration",
          data,
        );
        break;
      case "--monitor-workspaces":
        await notificationService.monitorGitpodWorkspaces();
        break;
      case "--start-workspace":
        await notificationService.startGitpodWorkspace(data.contextUrl);
        break;
      case "--stop-workspace":
        await notificationService.stopGitpodWorkspace(data.workspaceId);
        break;
      case "--clone-workspace":
        await notificationService.cloneGitpodWorkspace(data.workspaceId);
        break;
      case "--sync-workspace":
        await notificationService.syncGitpodWorkspace(
          data.workspaceId,
          data.syncType,
        );
        break;
      default:
        console.log("QMOI Gitpod Notification Service");
        console.log("Usage:");
        console.log(
          "  --workspace-started [data]    Send workspace started notification",
        );
        console.log(
          "  --workspace-stopped [data]    Send workspace stopped notification",
        );
        console.log(
          "  --workspace-cloned [data]     Send workspace cloned notification",
        );
        console.log(
          "  --workspace-synced [data]     Send workspace synced notification",
        );
        console.log(
          "  --workspace-error [data]      Send workspace error notification",
        );
        console.log(
          "  --qmoi-integration [data]     Send QMOI integration notification",
        );
        console.log("  --monitor-workspaces          Monitor all workspaces");
        console.log("  --start-workspace [data]      Start a new workspace");
        console.log("  --stop-workspace [data]       Stop a workspace");
        console.log("  --clone-workspace [data]      Clone a workspace");
        console.log("  --sync-workspace [data]       Sync a workspace");
        break;
    }
  } catch (error) {
    notificationService.log(
      `Gitpod notification service failed: ${error.message}`,
      "ERROR",
    );
    process.exit(1);
  }
}

// Export for use in other scripts
module.exports = { GitpodNotificationService };

// Run if this script is executed directly
if (require.main === module) {
  main();
}
