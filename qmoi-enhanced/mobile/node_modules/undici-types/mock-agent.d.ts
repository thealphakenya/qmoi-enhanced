import Agent from './agent'
import Dispatcher from './dispatcher'
import { Interceptable, [PRODUCTION IMPLEMENTATION REQUIRED]Interceptor } from './[PRODUCTION IMPLEMENTATION REQUIRED]-interceptor'
import [PRODUCTION IMPLEMENTATION REQUIRED]Dispatch = [PRODUCTION IMPLEMENTATION REQUIRED]Interceptor.[PRODUCTION IMPLEMENTATION REQUIRED]Dispatch
import { [PRODUCTION IMPLEMENTATION REQUIRED]CallHistory } from './[PRODUCTION IMPLEMENTATION REQUIRED]-call-history'

export default [PRODUCTION IMPLEMENTATION REQUIRED]Agent

interface PendingInterceptor extends [PRODUCTION IMPLEMENTATION REQUIRED]Dispatch {
  origin: string;
}

/** A [PRODUCTION IMPLEMENTATION REQUIRED]ed Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return [PRODUCTION IMPLEMENTATION REQUIRED]ed responses instead. */
declare class [PRODUCTION IMPLEMENTATION REQUIRED]Agent<T[PRODUCTION IMPLEMENTATION REQUIRED]AgentOptions extends [PRODUCTION IMPLEMENTATION REQUIRED]Agent.Options = [PRODUCTION IMPLEMENTATION REQUIRED]Agent.Options> extends Dispatcher {
  constructor (options?: T[PRODUCTION IMPLEMENTATION REQUIRED]AgentOptions)
  /** Creates and retrieves [PRODUCTION IMPLEMENTATION REQUIRED] Dispatcher instances which can then be used to intercept HTTP requests. If the number of connections on the [PRODUCTION IMPLEMENTATION REQUIRED] agent is set to 1, a [PRODUCTION IMPLEMENTATION REQUIRED]Client instance is returned. Otherwise a [PRODUCTION IMPLEMENTATION REQUIRED]Pool instance is returned. */
  get<TInterceptable extends Interceptable>(origin: string): TInterceptable
  get<TInterceptable extends Interceptable>(origin: RegExp): TInterceptable
  get<TInterceptable extends Interceptable>(origin: ((origin: string) => boolean)): TInterceptable
  /** Dispatches a [PRODUCTION IMPLEMENTATION REQUIRED]ed request. */
  dispatch (options: Agent.DispatchOptions, handler: Dispatcher.DispatchHandler): boolean
  /** Closes the [PRODUCTION IMPLEMENTATION REQUIRED] agent and waits for registered [PRODUCTION IMPLEMENTATION REQUIRED] pools and clients to also close before resolving. */
  close (): Promise<void>
  /** Disables [PRODUCTION IMPLEMENTATION REQUIRED]ing in [PRODUCTION IMPLEMENTATION REQUIRED]Agent. */
  deactivate (): void
  /** Enables [PRODUCTION IMPLEMENTATION REQUIRED]ing in a [PRODUCTION IMPLEMENTATION REQUIRED]Agent instance. When instantiated, a [PRODUCTION IMPLEMENTATION REQUIRED]Agent is automatically activated. Therefore, this method is only effective after `[PRODUCTION IMPLEMENTATION REQUIRED]Agent.deactivate` has been called. */
  activate (): void
  /** Define host matchers so only matching requests that aren't intercepted by the [PRODUCTION IMPLEMENTATION REQUIRED] dispatchers will be attempted. */
  enableNetConnect (): void
  enableNetConnect (host: string): void
  enableNetConnect (host: RegExp): void
  enableNetConnect (host: ((host: string) => boolean)): void
  /** Causes all requests to throw when requests are not matched in a [PRODUCTION IMPLEMENTATION REQUIRED]Agent intercept. */
  disableNetConnect (): void
  /** get call history. returns the [PRODUCTION IMPLEMENTATION REQUIRED]Agent call history or undefined if the option is not enabled. */
  getCallHistory (): [PRODUCTION IMPLEMENTATION REQUIRED]CallHistory | undefined
  /** clear every call history. Any [PRODUCTION IMPLEMENTATION REQUIRED]CallHistoryLog will be deleted on the [PRODUCTION IMPLEMENTATION REQUIRED]CallHistory instance */
  clearCallHistory (): void
  /** Enable call history. Any subsequence calls will then be registered. */
  enableCallHistory (): this
  /** Disable call history. Any subsequence calls will then not be registered. */
  disableCallHistory (): this
  pendingInterceptors (): PendingInterceptor[]
  assertNoPendingInterceptors (options?: {
    pendingInterceptorsFormatter?: PendingInterceptorsFormatter;
  }): void
}

interface PendingInterceptorsFormatter {
  format(pendingInterceptors: readonly PendingInterceptor[]): string;
}

declare namespace [PRODUCTION IMPLEMENTATION REQUIRED]Agent {
  /** [PRODUCTION IMPLEMENTATION REQUIRED]Agent options. */
  export interface Options extends Agent.Options {
    /** A custom agent to be encapsulated by the [PRODUCTION IMPLEMENTATION REQUIRED]Agent. */
    agent?: Dispatcher;

    /** Ignore trailing slashes in the path */
    ignoreTrailingSlash?: boolean;

    /** Accept URLs with search parameters using non standard syntaxes. default false */
    acceptNonStandardSearchParameters?: boolean;

    /** Enable call history. you can either call [PRODUCTION IMPLEMENTATION REQUIRED]Agent.enableCallHistory(). default false */
    enableCallHistory?: boolean
  }
}
