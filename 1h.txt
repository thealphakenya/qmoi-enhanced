Here’s how the User‑Generated (RSA) API method works on Bitget, so your AI application (using Qmoi or similar) can independently handle everything with robust security:


---

🧩 What Is a User‑Generated RSA API Key?

Instead of Bitget generating a Secret Key for you, you create your own RSA key pair—Bitget only stores your public key. You keep the private key securely. All API requests are signed with your private key, and Bitget verifies them with your public key.


---

🔑 Step-by-Step Setup

1. Generate RSA Key Pair

Use Bitget’s RSA tool or OpenSSL.

Example with OpenSSL:

# Private key (keep secret!)
openssl genpkey -algorithm RSA -out private.pem -pkeyopt rsa_keygen_bits:2048

# Public key (to upload)
openssl rsa -pubout -in private.pem -out public.pem

2. Create RSA API Key on Bitget

1. Go to Profile → API Management → Create New API.


2. Select User‑generated API Keys  .


3. Paste in your public key from public.pem.


4. Set a Note (name) and Passphrase, then configure permissions (trade, transfer, etc.).


5. Complete verification—2FA, email, SMS—and click Confirm  .



3. Securely Store the Private Key

Save private.pem on your server or secure vault (never share or upload it). This is used to sign all requests.


---

🔏 How Qmoi Signs Requests

Every API request must include headers:

ACCESS-KEY: (The API key ID assigned by Bitget)

ACCESS-SIGN: Your RSA-SHA256 signature, base64 encoded

ACCESS-TIMESTAMP: Current timestamp in ms since Epoch

ACCESS-PASSPHRASE: The passphrase you set during API key creation


Signature input =

timestamp + method.toUpperCase() + requestPath + (if any) "?" + queryString + body

Then:

# Pseudocode for signing
message = timestamp + method + path + body
signature = Base64(RSA_SHA256_Sign(private_key, message))

See Bitget’s docs .


---

✅ Why Use RSA (User‑Generated)?

Highest security – No secrets stored on Bitget’s side

Private key control – You remain sole owner of signing key

Ideal for AI-driven trading bots or institutions requiring strict security



---

🛠️ What You Need to Integrate with Qmoi

Component	Role

private.pem	Sign API requests within Qmoi for authentic RSA signature
public.pem	Uploaded to Bitget under “User‑Generated API Keys”
Sample code logic	Use RSA-SHA256 signing in your app to generate ACCESS-SIGN
Bitget API Key ID	Auto-provided by Bitget after setup
Passphrase	Value you set and included in headers



---

🧭 Summary & Next Steps

1. Generate RSA key pair


2. Create RSA API key on Bitget using public key + passphrase


3. Implement request signing within Qmoi using your private key


4. Test endpoints: GET account info, place orders, etc.


5. Go live with real trading once verified




---

Would you like me to provide sample code in Node.js or Python for RSA-signed Bitget API calls using your private key?

