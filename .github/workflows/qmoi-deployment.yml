name: QMOI Deployment Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
        - testing

env:
  QMOI_VERSION: "2.0"
  PYTHON_VERSION: "3.9"

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Run pre-deployment tests
      run: |
        python scripts/qmoi_pre_deployment_check.py
    
    - name: Validate configuration
      run: |
        python scripts/validate_config.py
    
    - name: Check security
      run: |
        python scripts/security_check.py

  # Deploy to Hugging Face
  deploy-huggingface:
    name: Deploy to Hugging Face
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install huggingface_hub
    
    - name: Deploy model
      env:
        HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
      run: |
        python scripts/qmoi_huggingface_setup.py
        huggingface-cli upload alphaqmoi/qmoi models/latest/ --token ${{ secrets.HUGGINGFACE_TOKEN }}
    
    - name: Deploy space
      env:
        HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
      run: |
        huggingface-cli upload alphaqmoi/qmoi-ai-system huggingface_space/ --token ${{ secrets.HUGGINGFACE_TOKEN }}
    
    - name: Update model card
      env:
        HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
      run: |
        python scripts/update_model_card.py

  # Deploy to AWS
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install boto3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to AWS
      run: |
        python scripts/deploy/aws_deploy.py
    
    - name: Verify AWS deployment
      run: |
        python scripts/verify_aws_deployment.py

  # Deploy to Google Cloud
  deploy-gcp:
    name: Deploy to Google Cloud
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install google-cloud-storage google-cloud-functions
    
    - name: Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy to GCP
      run: |
        python scripts/deploy/gcp_deploy.py
    
    - name: Verify GCP deployment
      run: |
        python scripts/verify_gcp_deployment.py

  # Deploy to Azure
  deploy-azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install azure-storage-blob azure-functions
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure
      run: |
        python scripts/deploy/azure_deploy.py
    
    - name: Verify Azure deployment
      run: |
        python scripts/verify_azure_deployment.py

  # Deploy to Cloudflare
  deploy-cloudflare:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install cloudflare
    
    - name: Deploy to Cloudflare
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        python scripts/deploy/cloudflare_deploy.py
    
    - name: Verify Cloudflare deployment
      run: |
        python scripts/verify_cloudflare_deployment.py

  # Deploy to DigitalOcean
  deploy-digitalocean:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install digitalocean
    
    - name: Deploy to DigitalOcean
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      run: |
        python scripts/deploy/digitalocean_deploy.py
    
    - name: Verify DigitalOcean deployment
      run: |
        python scripts/verify_digitalocean_deployment.py

  # Deploy mobile apps
  deploy-mobile:
    name: Deploy Mobile Apps
    runs-on: ubuntu-latest
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Build Android app
      run: |
        python scripts/build_android_app.py
    
    - name: Build iOS app
      run: |
        python scripts/build_ios_app.py
    
    - name: Deploy to app stores
      run: |
        python scripts/deploy_mobile_apps.py

  # Deploy desktop apps
  deploy-desktop:
    name: Deploy Desktop Apps
    runs-on: ${{ matrix.os }}
    needs: pre-deploy
    environment: ${{ github.event.inputs.environment || 'production' }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install pyinstaller
    
    - name: Build desktop app
      run: |
        python scripts/build_desktop_app.py
    
    - name: Upload desktop app
      uses: actions/upload-artifact@v3
      with:
        name: qmoi-desktop-${{ matrix.os }}
        path: dist/

  # Post-deployment verification
  post-deploy:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-huggingface, deploy-aws, deploy-gcp, deploy-azure, deploy-cloudflare, deploy-digitalocean, deploy-mobile, deploy-desktop]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Run health checks
      run: |
        python scripts/health_check_all_platforms.py
    
    - name: Test endpoints
      run: |
        python scripts/test_all_endpoints.py
    
    - name: Generate deployment report
      run: |
        python scripts/generate_deployment_report.py
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: reports/deployment/

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: post-deploy
    if: always()
    
    steps:
    - name: Check deployment status
      id: status
      run: |
        if [[ "${{ needs.post-deploy.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: Notify on success
      if: steps.status.outputs.status == 'success'
      run: |
        echo "✅ QMOI deployment completed successfully!"
        echo "🚀 All platforms deployed and verified"
        echo "📊 Health checks passed"
        echo "🔗 Endpoints tested and working"
    
    - name: Notify on failure
      if: steps.status.outputs.status == 'failure'
      run: |
        echo "❌ QMOI deployment failed!"
        echo "🔍 Check the logs for details"
        exit 1 