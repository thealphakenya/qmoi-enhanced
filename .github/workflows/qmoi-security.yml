name: QMOI Security & Compliance

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger
  security:
    types: [alert]

env:
  QMOI_VERSION: "2.0"
  PYTHON_VERSION: "3.9"

jobs:
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Run Bandit security scan
      run: |
        bandit -r scripts/ models/ huggingface_space/ -f json -o bandit-report.json
    
    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json
    
    - name: Run Semgrep scan
      run: |
        semgrep scan --config auto --json --output semgrep-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # Dependency Vulnerability Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
        pip install safety pip-audit
    
    - name: Check Python dependencies
      run: |
        safety check --json --output python-vulns.json
        pip-audit --format json --output pip-audit.json
    
    - name: Check Node.js dependencies
      run: |
        npm audit --audit-level moderate --json > npm-audit.json
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-reports-${{ github.run_id }}
        path: |
          python-vulns.json
          pip-audit.json
          npm-audit.json

  # Code Quality Security
  code-quality-security:
    name: Code Quality Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install tools
      run: |
        pip install flake8-security pylint-security
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Run security-focused linting
      run: |
        flake8 scripts/ models/ huggingface_space/ --select=S --output-file=flake8-security.txt
        pylint --disable=all --enable=security scripts/ models/ huggingface_space/ --output=security-lint.txt
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports-${{ github.run_id }}
        path: |
          flake8-security.txt
          security-lint.txt

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install tools
      run: |
        pip install detect-secrets
    
    - name: Scan for secrets
      run: |
        detect-secrets scan --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline --report --json > secrets-report.json
    
    - name: Upload secrets report
      uses: actions/upload-artifact@v4
      with:
        name: secrets-report-${{ github.run_id }}
        path: secrets-report.json

  # Container Security
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-results.json'
    
    - name: Upload container security report
      uses: actions/upload-artifact@v4
      with:
        name: container-security-${{ github.run_id }}
        path: trivy-results.json

  # Infrastructure Security
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install tools
      run: |
        pip install checkov
    
    - name: Scan infrastructure
      run: |
        checkov -d . --output json --output-file-path checkov-report.json
    
    - name: Upload infrastructure report
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-security-${{ github.run_id }}
        path: checkov-report.json

  # Compliance Check
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Run compliance checks
      run: |
        python scripts/compliance_checker.py
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report-${{ github.run_id }}
        path: reports/compliance/

  # Security Assessment
  security-assessment:
    name: Security Assessment
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check, code-quality-security, secrets-detection, container-security, infrastructure-security, compliance-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Generate security assessment
      run: |
        python scripts/generate_security_assessment.py
    
    - name: Upload security assessment
      uses: actions/upload-artifact@v4
      with:
        name: security-assessment-${{ github.run_id }}
        path: reports/security/

  # Security Fixes
  security-fixes:
    name: Security Fixes
    runs-on: ubuntu-latest
    needs: security-assessment
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Apply security fixes
      run: |
        python scripts/apply_security_fixes.py
    
    - name: Create security fix PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "fix: apply security fixes"
        title: "üîí Security Fixes"
        body: |
          Automated security fixes applied by QMOI Security System
          
          - Fixed vulnerabilities
          - Updated dependencies
          - Applied security patches
        branch: security-fixes

  # Security Notification
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-assessment, security-fixes]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/qmoi_enhanced_requirements.txt
    
    - name: Send security notifications
      run: |
        python scripts/send_security_notifications.py
    
    - name: Update security status
      run: |
        if [[ "${{ needs.security-assessment.result }}" == "success" ]]; then
          echo "‚úÖ QMOI security assessment completed successfully"
        else
          echo "‚ö†Ô∏è QMOI security assessment completed with issues"
          exit 1
        fi 