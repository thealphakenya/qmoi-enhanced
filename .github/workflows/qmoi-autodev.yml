name: QMOI Auto-Development & Documentation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - docs
          - test
          - deploy
          - self-test

env:
  NODE_VERSION: '18'
  QMOI_AUTODEV_ENABLED: 'true'

jobs:
  qmoi-autodev:
    runs-on: ubuntu-latest
    name: QMOI Auto-Development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm install -g vercel@latest

      - name: Setup environment
        run: |
          cp .env.example .env || echo "No .env.example found"
          echo "NODE_ENV=production" >> .env
          echo "NEXT_PUBLIC_APP_ENV=production" >> .env
          echo "QMOI_AUTODEV_ENABLED=true" >> .env

      - name: Run QMOI Documentation Verifier
        id: doc-verify
        run: |
          echo "üîç Running QMOI Documentation Verifier..."
          node scripts/qmoi_doc_verifier.js verify
          
          # Check if new docs were created
          if [ -f "docs/verification-report.json" ]; then
            NEW_DOCS=$(node -e "
              const report = JSON.parse(require('fs').readFileSync('docs/verification-report.json'));
              console.log(report.summary.autoCreated || 0);
            ")
            echo "new_docs=$NEW_DOCS" >> $GITHUB_OUTPUT
          fi

      - name: Run QMOI Self-Test Runner
        id: self-test
        run: |
          echo "üß™ Running QMOI Self-Test Runner..."
          node scripts/qmoi_self_test_runner.js all
          
          # Check test results
          if [ -f "logs/self-test-report.json" ]; then
            TEST_RESULTS=$(node -e "
              const report = JSON.parse(require('fs').readFileSync('logs/self-test-report.json'));
              console.log(JSON.stringify({
                total: report.summary.totalTests,
                passed: report.summary.testSuccess,
                autoFixSuccess: report.summary.autoFixSuccess
              }));
            ")
            echo "test_results=$TEST_RESULTS" >> $GITHUB_OUTPUT
          fi

      - name: Run enhanced error fix
        id: error-fix
        run: |
          echo "üîß Running enhanced error fix..."
          node scripts/enhanced-error-fix.js --type=comprehensive
          
          # Check if fixes were applied
          if [ -f "logs/ai_error_fix.log" ]; then
            FIXES_APPLIED=$(grep -c "Fix applied" logs/ai_error_fix.log || echo "0")
            echo "fixes_applied=$FIXES_APPLIED" >> $GITHUB_OUTPUT
          fi

      - name: Run linting and type checking
        id: lint-check
        run: |
          echo "üßπ Running linting and type checking..."
          npm run lint || echo "Lint issues found"
          npm run type-check || echo "Type issues found"

      - name: Run tests
        id: tests
        run: |
          echo "üß™ Running tests..."
          npm test -- --passWithNoTests || echo "Some tests failed"

      - name: Build application
        id: build
        run: |
          echo "üèóÔ∏è Building application..."
          npm run build

      - name: Deploy to Vercel (if on main branch)
        id: deploy
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          echo "üöÄ Deploying to Vercel..."
          
          # Set Vercel environment variables
          echo "VERCEL_TOKEN=${{ secrets.VERCEL_TOKEN }}" >> $GITHUB_ENV
          echo "VERCEL_ORG_ID=${{ secrets.VERCEL_ORG_ID }}" >> $GITHUB_ENV
          echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}" >> $GITHUB_ENV
          
          # Deploy using enhanced script
          node scripts/deploy/vercel_auto_deploy.js
          
          # Get deployment URL
          DEPLOY_URL=$(npx vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "qmoi" | head -1 | awk '{print $2}' || echo "")
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Run health check
        id: health-check
        run: |
          echo "üè• Running health check..."
          node scripts/deploy/health-check.js check
          
          # Check health status
          if [ -f "logs/deployment-health.log" ]; then
            HEALTH_STATUS=$(tail -1 logs/deployment-health.log | grep -o "healthy\|unhealthy" || echo "unknown")
            echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          fi

      - name: Generate comprehensive report
        id: report
        run: |
          echo "üìä Generating comprehensive report..."
          
          # Create report
          cat > qmoi-autodev-report.md << EOF
          # QMOI Auto-Development Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          
          ## Summary
          
          - **Documentation:** ${{ steps.doc-verify.outputs.new_docs || 0 }} new docs created
          - **Self-Tests:** ${{ fromJson(steps.self-test.outputs.test_results).passed || 0 }}/${{ fromJson(steps.self-test.outputs.test_results).total || 0 }} passed
          - **Auto-Fixes:** ${{ steps.error-fix.outputs.fixes_applied || 0 }} fixes applied
          - **Build:** ${{ steps.build.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
          - **Deployment:** ${{ steps.deploy.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
          - **Health:** ${{ steps.health-check.outputs.health_status || 'unknown' }}
          
          ## Details
          
          ### Documentation Verification
          - New features detected and documented
          - Claims verified against codebase
          - Auto-generated documentation created
          
          ### Self-Test Results
          - Manual error simulation completed
          - Auto-fix capabilities tested
          - System resilience verified
          
          ### Error Fixing
          - Comprehensive error detection
          - Automatic fix application
          - System stability maintained
          
          ### Deployment
          - Multi-strategy deployment attempted
          - Health monitoring active
          - Rollback capabilities available
          
          ## Files Modified
          
          \`\`\`
          $(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "No changes detected")
          \`\`\`
          
          ## Next Steps
          
          1. Review auto-generated documentation
          2. Verify deployment health
          3. Monitor system performance
          4. Address any remaining issues
          
          ---
          *Report generated by QMOI Auto-Development System*
          EOF
          
          # Save report
          echo "report_path=qmoi-autodev-report.md" >> $GITHUB_OUTPUT

      - name: Upload reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qmoi-autodev-reports
          path: |
            qmoi-autodev-report.md
            docs/verification-report.json
            logs/self-test-report.json
            logs/ai_error_fix.log
            logs/deployment-health.log

      - name: Send notifications
        if: always()
        run: |
          echo "üì¢ Sending notifications..."
          
          # Prepare notification message
          MESSAGE="QMOI Auto-Development Report:
          
          üìä Summary:
          - Docs: ${{ steps.doc-verify.outputs.new_docs || 0 }} new
          - Tests: ${{ fromJson(steps.self-test.outputs.test_results).passed || 0 }}/${{ fromJson(steps.self-test.outputs.test_results).total || 0 }} passed
          - Fixes: ${{ steps.error-fix.outputs.fixes_applied || 0 }} applied
          - Build: ${{ steps.build.outcome == 'success' && '‚úÖ' || '‚ùå' }}
          - Deploy: ${{ steps.deploy.outcome == 'success' && '‚úÖ' || '‚ùå' }}
          - Health: ${{ steps.health-check.outputs.health_status || 'unknown' }}
          
          üîó Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Send to Slack if configured
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"$MESSAGE\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
          
          # Send to Discord if configured
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"content\":\"$MESSAGE\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi

  qmoi-docs-only:
    runs-on: ubuntu-latest
    name: QMOI Documentation Only
    if: github.event.inputs.action == 'docs'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run documentation verification
        run: |
          node scripts/qmoi_doc_verifier.js verify

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qmoi-docs
          path: |
            docs/
            docs/verification-report.json

  qmoi-test-only:
    runs-on: ubuntu-latest
    name: QMOI Self-Test Only
    if: github.event.inputs.action == 'test'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run self-tests
        run: |
          node scripts/qmoi_self_test_runner.js all

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qmoi-tests
          path: |
            logs/self-test-report.json
            logs/ai_error_fix.log 