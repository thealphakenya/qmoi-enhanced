# QMOI GitLab CI/CD Pipeline
# Enhanced with comprehensive automation, error handling, and notifications

variables:
  NODE_VERSION: "18"
  NPM_CONFIG_CACHE: ".npm-cache"
  CI_CACHE_DISABLE: "false"
  FORCE_COLOR: "1"
  QMOI_AUTO_FIX: "true"
  QMOI_NOTIFICATIONS: "true"

# Cache configuration for faster builds
cache:
  key: 
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm-cache/
    - logs/
  policy: pull-push

# Stages for the pipeline
stages:
  - setup
  - validate
  - test
  - build
  - deploy
  - notify

# Global before_script for all jobs
before_script:
  - echo "üöÄ Starting QMOI GitLab CI Pipeline"
  - echo "Node version: $(node --version)"
  - echo "NPM version: $(npm --version)"
  - echo "GitLab CI variables:"
  - echo "  - CI_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME"
  - echo "  - CI_COMMIT_SHA: $CI_COMMIT_SHA"
  - echo "  - CI_JOB_ID: $CI_JOB_ID"
  - echo "  - CI_PIPELINE_ID: $CI_PIPELINE_ID"
  - mkdir -p logs
  - export QMOI_LOG_FILE="logs/gitlab-ci-${CI_JOB_ID}.log"

# Setup stage - Initialize QMOI environment
setup:
  stage: setup
  image: node:18-alpine
  script:
    - echo "üîß Setting up QMOI environment..."
    - npm config set cache .npm-cache
    - npm ci --prefer-offline --no-audit
    - echo "‚úÖ Setup completed"
  artifacts:
    paths:
      - node_modules/
      - .npm-cache/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Auto-fix stage - Handle common errors automatically
auto-fix:
  stage: setup
  image: node:18-alpine
  script:
    - echo "üîß Running QMOI auto-fix..."
    - node scripts/gitlab-automation.js --fix-only
    - echo "‚úÖ Auto-fix completed"
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Validation stage - Check code quality
validate:
  stage: validate
  image: node:18-alpine
  script:
    - echo "üîç Running QMOI validation..."
    - npm run lint
    - npm run type-check
    - npm run format:check
    - echo "‚úÖ Validation completed"
  artifacts:
    reports:
      eslint: logs/eslint-report.json
    paths:
      - logs/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Test stage - Run all test suites
test:
  stage: test
  image: node:18-alpine
  services:
    - name: mcr.microsoft.com/playwright:v1.40.0-focal
      alias: playwright
  variables:
    PLAYWRIGHT_BROWSERS_PATH: "0"
  script:
    - echo "üß™ Running QMOI tests..."
    - npm run test:coverage
    - npm run test:ui
    - npm run test:e2e
    - echo "‚úÖ Tests completed"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit: logs/test-results.xml
    paths:
      - coverage/
      - logs/
      - test-results/
    expire_in: 1 week
  coverage: '/All files[^|]*\|[^|]*\s+(\d+)/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Build stage - Create production build
build:
  stage: build
  image: node:18-alpine
  script:
    - echo "üèóÔ∏è Building QMOI application..."
    - npm run build
    - npm run build:prod
    - echo "‚úÖ Build completed"
  artifacts:
    paths:
      - build/
      - dist/
      - logs/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Deploy stage - Deploy to GitLab
deploy:
  stage: deploy
  image: node:18-alpine
  script:
    - echo "üöÄ Deploying QMOI to GitLab..."
    - node scripts/gitlab-automation.js --deploy-only
    - echo "‚úÖ Deployment completed"
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
  environment:
    name: production
    url: $CI_PROJECT_URL
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Notify stage - Send notifications
notify:
  stage: notify
  image: node:18-alpine
  script:
    - echo "üì¢ Sending QMOI notifications..."
    - node scripts/gitlab-automation.js --notify-only
    - echo "‚úÖ Notifications sent"
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Full automation pipeline
qmoi-full-automation:
  stage: deploy
  image: node:18-alpine
  script:
    - echo "ü§ñ Running QMOI full automation..."
    - node scripts/gitlab-automation.js --full-pipeline
    - echo "‚úÖ Full automation completed"
  artifacts:
    paths:
      - logs/
      - build/
      - dist/
    expire_in: 1 week
  environment:
    name: qmoi-automation
    url: $CI_PROJECT_URL
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Error recovery job
error-recovery:
  stage: deploy
  image: node:18-alpine
  script:
    - echo "üõ†Ô∏è Running QMOI error recovery..."
    - node scripts/gitlab-automation.js --recovery-only
    - echo "‚úÖ Error recovery completed"
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
  allow_failure: true
  rules:
    - when: on_failure
    - if: $QMOI_ERROR_RECOVERY == "true"

# Health check job
health-check:
  stage: deploy
  image: node:18-alpine
  script:
    - echo "üè• Running QMOI health check..."
    - npm run health:check
    - node scripts/gitlab-automation.js --health-check
    - echo "‚úÖ Health check completed"
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Documentation update job
docs-update:
  stage: deploy
  image: node:18-alpine
  script:
    - echo "üìö Updating QMOI documentation..."
    - npm run docs:generate
    - npm run docs:deploy
    - echo "‚úÖ Documentation updated"
  artifacts:
    paths:
      - docs/
      - logs/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Security scan job
security-scan:
  stage: test
  image: node:18-alpine
  script:
    - echo "üîí Running QMOI security scan..."
    - npm audit --audit-level=moderate
    - npm run security:scan
    - echo "‚úÖ Security scan completed"
  artifacts:
    reports:
      sast: logs/security-report.json
    paths:
      - logs/
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Performance test job
performance-test:
  stage: test
  image: node:18-alpine
  script:
    - echo "‚ö° Running QMOI performance tests..."
    - npm run test:performance
    - npm run lighthouse:test
    - echo "‚úÖ Performance tests completed"
  artifacts:
    paths:
      - logs/
      - performance-reports/
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Auto-push job - Always runs regardless of other job status
qmoi-auto-push:
  stage: .post
  image: node:18-alpine
  script:
    - echo "ü§ñ Running QMOI Comprehensive Auto-Push..."
    - node scripts/qmoi-auto-push.js
    - echo "‚úÖ Auto-push completed"
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
  when: always
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Cleanup job
cleanup:
  stage: .post
  image: node:18-alpine
  script:
    - echo "üßπ Running QMOI cleanup..."
    - npm run cleanup
    - echo "‚úÖ Cleanup completed"
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
  when: always
  allow_failure: true

# Global after_script for all jobs
after_script:
  - echo "üìã QMOI GitLab CI job completed"
  - echo "Job status: $CI_JOB_STATUS"
  - echo "Pipeline URL: $CI_PIPELINE_URL"
  - echo "Job URL: $CI_JOB_URL"
  - |
    if [ "$CI_JOB_STATUS" != "success" ]; then
      echo "‚ùå Job failed - QMOI automation will handle recovery"
      node scripts/gitlab-automation.js --job-failed || true
    fi
  - |
    # Always run auto-push regardless of job status
    echo "ü§ñ Running QMOI Auto-Push..."
    node scripts/qmoi-auto-push.js || echo "Auto-push failed but continuing..." 