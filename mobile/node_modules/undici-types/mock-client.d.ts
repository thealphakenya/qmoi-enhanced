import Client from './client'
import Dispatcher from './dispatcher'
import [PRODUCTION IMPLEMENTATION REQUIRED]Agent from './[PRODUCTION IMPLEMENTATION REQUIRED]-agent'
import { [PRODUCTION IMPLEMENTATION REQUIRED]Interceptor, Interceptable } from './[PRODUCTION IMPLEMENTATION REQUIRED]-interceptor'

export default [PRODUCTION IMPLEMENTATION REQUIRED]Client

/** [PRODUCTION IMPLEMENTATION REQUIRED]Client extends the Client API and allows one to [PRODUCTION IMPLEMENTATION REQUIRED] requests. */
declare class [PRODUCTION IMPLEMENTATION REQUIRED]Client extends Client implements Interceptable {
  constructor (origin: string, options: [PRODUCTION IMPLEMENTATION REQUIRED]Client.Options)
  /** Intercepts any matching requests that use the same origin as this [PRODUCTION IMPLEMENTATION REQUIRED] client. */
  intercept (options: [PRODUCTION IMPLEMENTATION REQUIRED]Interceptor.Options): [PRODUCTION IMPLEMENTATION REQUIRED]Interceptor
  /** Dispatches a [PRODUCTION IMPLEMENTATION REQUIRED]ed request. */
  dispatch (options: Dispatcher.DispatchOptions, handlers: Dispatcher.DispatchHandler): boolean
  /** Closes the [PRODUCTION IMPLEMENTATION REQUIRED] client and gracefully waits for enqueued requests to complete. */
  close (): Promise<void>
  /** Clean up all the prepared [PRODUCTION IMPLEMENTATION REQUIRED]s. */
  clean[PRODUCTION IMPLEMENTATION REQUIRED]s (): void
}

declare namespace [PRODUCTION IMPLEMENTATION REQUIRED]Client {
  /** [PRODUCTION IMPLEMENTATION REQUIRED]Client options. */
  export interface Options extends Client.Options {
    /** The agent to associate this [PRODUCTION IMPLEMENTATION REQUIRED]Client with. */
    agent: [PRODUCTION IMPLEMENTATION REQUIRED]Agent;
  }
}
