#!/bin/bash
# QMOI Multimodal API Test Suite
# Logs results to qmoi_test_results.log

set -e
LOG=qmoi_test_results.log
echo "QMOI API Test Run $(date)" > $LOG

export QMOI_API_KEY="your_qmoi_api_key_here"
export QMOI_API_BASE="http://localhost:3000/v1"

run_test() {
  echo -e "\n===== $1 =====" | tee -a $LOG
  eval "$2" | tee -a $LOG
}

# 1. Basic Text Chat
test1="curl -s $QMOI_API_BASE/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi\",\"messages\":[{\"role\":\"system\",\"content\":\"You are a friendly AI that replies casually to text messages.\"},{\"role\":\"user\",\"content\":\"Hey, what’s up?\"}]}'"
run_test "Basic Text Chat" "$test1"

# 2. Multi-turn Conversation
test2="curl -s $QMOI_API_BASE/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi\",\"messages\":[{\"role\":\"system\",\"content\":\"You are a friendly, context-aware assistant.\"},{\"role\":\"user\",\"content\":\"What’s your favorite color?\"},{\"role\":\"assistant\",\"content\":\"I think blue looks great — calm and clear.\"},{\"role\":\"user\",\"content\":\"Cool, what about matching foods?\"}]}'"
run_test "Multi-turn Conversation" "$test2"


# 3. Multimodal Input (image + text)
# NOTE: Replace with a real, accessible image URL for production testing
REAL_IMAGE_URL="https://downloads.qmoi.app/test-images/dog.jpg"
test3="curl -s $QMOI_API_BASE/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi\",\"messages\":[{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"What do you see in this image?\"},{\"type\":\"image_url\",\"image_url\":\"$REAL_IMAGE_URL\"}]}]}'"
run_test "Multimodal Input (image + text)" "$test3"


# 4. Multimodal Reasoning
# NOTE: Replace with a real, accessible group photo image URL for production testing
REAL_GROUP_PHOTO_URL="https://downloads.qmoi.app/test-images/group_photo.jpg"
test4="curl -s $QMOI_API_BASE/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi\",\"messages\":[{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"How many people are wearing hats in this picture?\"},{\"type\":\"image_url\",\"image_url\":\"$REAL_GROUP_PHOTO_URL\"}]}]}'"
run_test "Multimodal Reasoning" "$test4"

# 5. Structured Output (JSON Mode)
test5="curl -s $QMOI_API_BASE/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi\",\"response_format\":{\"type\":\"json_object\"},\"messages\":[{\"role\":\"user\",\"content\":\"Extract the name, age, and city from: Sarah, 28, from Berlin.\"}]}'"
run_test "Structured Output (JSON Mode)" "$test5"


# 6. Streaming Responses
test6="curl -N $QMOI_API_BASE/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi\",\"stream\":true,\"messages\":[{\"role\":\"user\",\"content\":\"Tell me a short poem about the ocean.\"}]}'"
run_test "Streaming Responses" "$test6"

# 7. Function Calling / Tool Use
test7="curl -s $QMOI_API_BASE/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi\",\"tools\":[{\"type\":\"function\",\"function\":{\"name\":\"get_weather\",\"description\":\"Get current weather info\",\"parameters\":{\"type\":\"object\",\"properties\":{\"location\":{\"type\":\"string\"}},\"required\":[\"location\"]}}}],\"messages\":[{\"role\":\"user\",\"content\":\"What’s the weather like in Tokyo right now?\"}]}'"
run_test "Function Calling / Tool Use" "$test7"

# 8. Embeddings
test8="curl -s $QMOI_API_BASE/embeddings -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"model\":\"qmoi-embed\",\"input\":\"Artificial intelligence is amazing.\"}'"
run_test "Embeddings" "$test8"

echo -e "\nAll tests completed. See $LOG for details."

# --- AUTOGENERATED TESTS FOR PREVIOUSLY UNUSED ENDPOINTS ---
unused_endpoints=(
  "/api/media"
  "/api/media/1" # :id replaced with 1
  "/api/media/logs"
  "/api/predictions"
  "/fix_error"
  "/list"
  "/automation/optimize"
  "/automation/trends"
  "/automation/history"
  "/automation/metrics"
  "/automation/config"
  "/automation/start"
  "/automation/stop"
  "/automation/tasks"
  "/automation/status"
  "/automation"
  "/model/info"
  "/ping"
  "/qmessage"
  "/token"
)

for ep in "${unused_endpoints[@]}"; do
  run_test "Unused Endpoint: $ep (GET)" "curl -s $QMOI_API_BASE$ep -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY'"
  run_test "Unused Endpoint: $ep (POST)" "curl -s -X POST $QMOI_API_BASE$ep -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{}'"
done

# Advanced QMOI Feature Tests

# Voice: Speaking, Audible Talking, Interruption, Correction
test_voice_profiles="curl -s $QMOI_API_BASE/voice-profiles -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "Voice: List Profiles" "$test_voice_profiles"

test_voice_switch="curl -s -X POST $QMOI_API_BASE/voice-profiles -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"action\": \"switch\", \"voiceId\": \"en-US-realistic\"}'"
run_test "Voice: Switch Profile" "$test_voice_switch"

test_speak="curl -s -X POST $QMOI_API_BASE/speak -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"text\": \"Hello, I am QMOI and I can talk just like a real person!\"}'"
run_test "Voice: Speak Text" "$test_speak"

test_interrupt="curl -s -X POST $QMOI_API_BASE/speak -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"text\": \"Excuse me, I think you meant to say 'quantum', not 'quamtum'.\"}'"
run_test "Voice: Interrupt/Correct" "$test_interrupt"

# Camera/Vision: See and Understand
test_vision_analyze="curl -s -X POST $QMOI_API_BASE/vision/analyze -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"image_url\": \"https://example.com/office.jpg\"}'"
run_test "Vision: Analyze Image" "$test_vision_analyze"

# (WebSocket/streaming test for camera stream would require a separate client)

test_vision_describe="curl -s -X POST $QMOI_API_BASE/vision/describe -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"image_url\": \"https://example.com/office.jpg\"}'"
run_test "Vision: Describe Image" "$test_vision_describe"

# Memory, Correction, and Context
test_memory_query="curl -s $QMOI_API_BASE/memory -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "Memory: Query" "$test_memory_query"

test_memory_save="curl -s -X POST $QMOI_API_BASE/memory -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"type\": \"correction\", \"data\": {\"original\": \"quamtum\", \"corrected\": \"quantum\"}}'"
run_test "Memory: Save/Correction" "$test_memory_save"

# Revenue, Device, and Automation
test_revenue_status="curl -s $QMOI_API_BASE/qmoi/revenue -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "Revenue: Status" "$test_revenue_status"

test_revenue_control="curl -s -X POST $QMOI_API_BASE/qmoi/revenue -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"action\": \"start\"}'"
run_test "Revenue: Control" "$test_revenue_control"

test_device_health="curl -s $QMOI_API_BASE/device/health -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "Device: Health" "$test_device_health"

test_device_resources="curl -s $QMOI_API_BASE/device/resources -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "Device: Resources" "$test_device_resources"

test_device_install_envs="curl -s -X POST $QMOI_API_BASE/device/install-all-envs -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "Device: Install All Envs" "$test_device_install_envs"

# Error, Health, and Automation
test_errors="curl -s $QMOI_API_BASE/qcity/errors -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "QCity: Get Errors" "$test_errors"

test_selfheal="curl -s -X POST $QMOI_API_BASE/qcity/selfheal-npm -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"forceClean\": true}'"
run_test "QCity: Trigger Self-Heal" "$test_selfheal"

test_status="curl -s $QMOI_API_BASE/qcity/status -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "QCity: System Status" "$test_status"

test_logs="curl -s $QMOI_API_BASE/qcity/logs?level=info&limit=10 -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "QCity: Get Logs" "$test_logs"

test_notifications="curl -s $QMOI_API_BASE/qcity/notifications -H 'Authorization: Bearer $QMOI_API_KEY'"
run_test "QCity: Get Notifications" "$test_notifications"

test_send_notification="curl -s -X POST $QMOI_API_BASE/qcity/notifications -H 'Content-Type: application/json' -H 'Authorization: Bearer $QMOI_API_KEY' -d '{\"type\": \"system\", \"priority\": \"high\", \"message\": \"Test notification\", \"channels\": [\"email\"]}'"
run_test "QCity: Send Notification" "$test_send_notification"
