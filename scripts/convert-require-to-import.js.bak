const fs = require('fs');
const path = require('path');

const rootDir = process.argv[2] || '.';

// Regex to match require statements:
// e.g. const X = require('module');
// or const { A, B } = require('module');
const requireRegex = /^(const|let|var)\s+([\w{},\s]+)\s*=\s*require\(['"]([^'"]+)['"]\);?$/gm;

function convertRequireToImport(content) {
  return content.replace(requireRegex, (match, declType, varNames, modulePath) => {
    varNames = varNames.trim();
    return `import ${varNames} from '${modulePath}';`;
  });
}

function processFile(filePath) {
  if (!filePath.endsWith('.js') && !filePath.endsWith('.ts')) return;

  let content = fs.readFileSync(filePath, 'utf8');
  if (!content.includes('require(')) return; // skip if no require

  const backupPath = filePath + '.bak';
  if (!fs.existsSync(backupPath)) {
    fs.writeFileSync(backupPath, content, 'utf8'); // backup original file
  }

  const converted = convertRequireToImport(content);
  if (converted !== content) {
    fs.writeFileSync(filePath, converted, 'utf8');
    console.log(`Converted: ${filePath}`);
  }
}

function walkDir(dir) {
  const files = fs.readdirSync(dir);
  for (const file of files) {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      walkDir(fullPath);
    } else {
      processFile(fullPath);
    }
  }
}

walkDir(rootDir);

console.log('Require to import conversion complete!');
