#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const root = path.resolve(__dirname, '..');
const pkgPath = path.join(root, 'package.json');
if (!fs.existsSync(pkgPath)) {
  console.error('package.json not found');
  process.exit(2);
}
const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));

const scripts = pkg.scripts || {};
const scriptNames = Object.keys(scripts).sort();

let out = [];
out.push('# BUILD APPS FOR ALL PLATFORMS');
out.push('');
out.push('_Auto-generated by scripts/generate-builds-doc.cjs_');
out.push('');
out.push('This document lists build scripts, helper scripts, and release policy for the QMOI project. It is meant as a single reference for maintainers and CI.');
out.push('');
out.push('## package.json scripts');
out.push('');
scriptNames.forEach(name => {
  const cmd = scripts[name].replace(/\n/g, ' ');
  out.push(`- **${name}**: \n  - command: \`${cmd}\``);
});

out.push('');
out.push('## scripts/ directory');
out.push('');
try {
  const scriptsDir = path.join(root, 'scripts');
  const files = fs.existsSync(scriptsDir) ? fs.readdirSync(scriptsDir).filter(f => f.endsWith('.js') || f.endsWith('.sh') || f.endsWith('.ps1') || f.endsWith('.cjs')) : [];
  files.sort().forEach(f => {
    out.push(`- **${f}**: \n  - path: \\scripts/${f}`);
  });
} catch (e) {
  // ignore errors
}

out.push('');
out.push('## Release policy');
out.push('');
out.push('- All releases MUST be created as GitHub Releases (annotated tags).');
out.push('- CI will create a draft release and attach artifacts when a release tag is pushed.');
out.push('- Release notes must reference `RELEASETRACKS.md` and list affected platforms.');

out.push('');
out.push('## README links');
out.push('');
out.push('- The project `README.md` should contain a link to this file and an apps table with download links.');

const dest = path.join(root, 'BUILDAPPSFORALLPLATFORMS.md');
fs.writeFileSync(dest, out.join('\n') + '\n');
console.log('Wrote', dest);
